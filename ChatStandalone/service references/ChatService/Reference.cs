//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatStandalone.ChatService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.ISendChatService", CallbackContract=typeof(ChatStandalone.ChatService.ISendChatServiceCallback))]
    public interface ISendChatService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendChatService/SendMessage")]
        void SendMessage(Framework.ChatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendChatService/GetHistory", ReplyAction="http://tempuri.org/ISendChatService/GetHistoryResponse")]
        Framework.ChatMessage[] GetHistory(string sender, string receiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendChatService/Register", ReplyAction="http://tempuri.org/ISendChatService/RegisterResponse")]
        Framework.RegisterResult Register(Framework.ChatUser user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendChatService/UpdateUser")]
        void UpdateUser(Framework.ChatUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISendChatService/Login", ReplyAction="http://tempuri.org/ISendChatService/LoginResponse")]
        Framework.ChatUser Login(string Name, string Password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendChatService/Start")]
        void Start(string Name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendChatService/Stop")]
        void Stop(string Name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISendChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendChatService/ReceiveMessage")]
        void ReceiveMessage(Framework.ChatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendChatService/SendNames")]
        void SendNames(Framework.ChatUser[] names);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendChatService/DisconnectClient")]
        void DisconnectClient();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISendChatServiceChannel : ChatStandalone.ChatService.ISendChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendChatServiceClient : System.ServiceModel.DuplexClientBase<ChatStandalone.ChatService.ISendChatService>, ChatStandalone.ChatService.ISendChatService {
        
        public SendChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SendChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SendChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SendChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SendChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(Framework.ChatMessage message) {
            base.Channel.SendMessage(message);
        }
        
        public Framework.ChatMessage[] GetHistory(string sender, string receiver) {
            return base.Channel.GetHistory(sender, receiver);
        }
        
        public Framework.RegisterResult Register(Framework.ChatUser user) {
            return base.Channel.Register(user);
        }
        
        public void UpdateUser(Framework.ChatUser user) {
            base.Channel.UpdateUser(user);
        }
        
        public Framework.ChatUser Login(string Name, string Password) {
            return base.Channel.Login(Name, Password);
        }
        
        public void Start(string Name) {
            base.Channel.Start(Name);
        }
        
        public void Stop(string Name) {
            base.Channel.Stop(Name);
        }
    }
}
